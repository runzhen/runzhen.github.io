<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Boltdb on Mind in the Wind</title>
    <link>https://runzhen.github.io/tags/boltdb/</link>
    <description>Recent content in Boltdb on Mind in the Wind</description>
    <image>
      <title>Mind in the Wind</title>
      <url>https://runzhen.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://runzhen.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.125.5</generator>
    <language>en</language>
    <lastBuildDate>Wed, 04 Jan 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://runzhen.github.io/tags/boltdb/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>boltdb 中 B&#43; 树的设计与实现</title>
      <link>https://runzhen.github.io/posts/boltdb-b-plus-tree/</link>
      <pubDate>Wed, 04 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://runzhen.github.io/posts/boltdb-b-plus-tree/</guid>
      <description>如何存储和表示 B+ 树 前面已经知道，page 是代表 B+ 树被序列化到了磁盘上的结构，一个 page 就是一个 B+ 树节点，通过 mmap 把磁盘上的页映射到内存，然后用 unsafe.Pointer(p) 直接把二进制序列化成 page 结构。也正因为如此，x86 架构上生成的 db 文件是不能在 ARM 架构的机器上打开的。
而 node 结构同样也表示内存中一个 B+ 树的节点，node 与 page 的区别是 node 按需创建的，对于不需要修改的B+树节点，boltdb直接从page中读取数据，当需要修改某个 B+ 树节点时，比如插入删除数据，boltdb 从 page 结构生成成 node 。（此处存疑，我觉得应该是 Cursor 在游走的过程中就会把 page 转化成 node）
Bucket.node() 函数中就有如下一段话
func (b *Bucket) node(pgid pgid, parent *node) *node { // Retrieve node if it&amp;#39;s already been created. if n := b.nodes[pgid]; n != nil { return n } // Read the page into the node and cache it.</description>
    </item>
  </channel>
</rss>
