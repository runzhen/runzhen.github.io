<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Grpc on Mind in the Wind</title>
    <link>https://runzhen.github.io/tags/grpc/</link>
    <description>Recent content in Grpc on Mind in the Wind</description>
    <image>
      <title>Mind in the Wind</title>
      <url>https://runzhen.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://runzhen.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.125.1</generator>
    <language>en</language>
    <lastBuildDate>Mon, 04 Apr 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://runzhen.github.io/tags/grpc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>gRPC client 如何实现 TCP 重连</title>
      <link>https://runzhen.github.io/posts/how-does-grpc-client-reconnect-tcp/</link>
      <pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://runzhen.github.io/posts/how-does-grpc-client-reconnect-tcp/</guid>
      <description>之前写过一篇 gRPC-go 建立 TCP 连接的过程 博客，主要研究了 client 程序启动后，如何与 server 建立 TCP 连接。
今天，在思考 redis-go 的连接池实现的时候，突然想到：
当 gRPC 的 TCP 连接断开后，能自动重连吗？ 如果可以，是如何实现的 ？ 首先要注意，这里指的是 TCP 连接，而不是 http2 中的 stream。 我们知道，gRPC 数据的传输使用 http2 的多路复用，也就是在一个 TCP 连接上有多个全双工的 http2 stream，这里的 stream 如果被断开后怎么重连与 http2 的实现有关，不在本文讨论范围。
对于上面第一个问题，使用 gRPC 的经验告诉我是可以自动重连的，不妨再做个简单的测试，client 端代码如下：
func main() { conn, _ := grpc.Dial(&amp;#34;127.0.0.1:8080&amp;#34;, grpc.WithInsecure()) defer conn.Close() cli := protobuf.NewTestClient(conn) req := &amp;amp;protobuf.EchoRequest{ Msg: &amp;#34;hi&amp;#34;, } for i := 0; i &amp;lt; 10000; i++ { time.</description>
    </item>
    <item>
      <title>How gRPC-go set up the TCP connection</title>
      <link>https://runzhen.github.io/posts/grpc-client-tcp-connection/</link>
      <pubDate>Sun, 11 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://runzhen.github.io/posts/grpc-client-tcp-connection/</guid>
      <description>首先看一个最简单的建立 client server 之间 gRPC 连接的代码，以这个代码为例，分析一下 TCP 是在何时建立的。
Server 端的代码相对来说很容易，一个最简单的 server 代码如下：
func main() { lis, _ := net.Listen(&amp;#34;tcp&amp;#34;, fmt.Sprintf(&amp;#34;:%d&amp;#34;, 8080)) grpcServer := grpc.NewServer() protobuf.RegisterTestServer(grpcServer, &amp;amp;server{}) grpcServer.Serve(lis) } 在 grpc/server.go 中的 Serve() 函数调用了 lis.Accept() 并阻塞，当 client 端发来 TCP 请求时，Accept() 返回 Conn 结构，并开启 goroutine handleRawConn() 进行后续的处理。
就 TCP 来说，server 端的代码简单易懂，相比之下 client 端则不一样，一个基本的 Client 代码如下：
func main() { conn, err := grpc.Dial(&amp;#34;localhost:8080&amp;#34;, grpc.WithInsecure()) defer conn.Close() cli := protobuf.NewTestClient(conn) } 而要弄清楚 Client 端如何建立 TCP 却不容易，这是因为 grpc client 有 resolve DNS 以及做 load balancer 的功能，因此代码复杂很多。</description>
    </item>
  </channel>
</rss>
